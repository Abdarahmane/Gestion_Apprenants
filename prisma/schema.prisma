// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  fullName      String         @map("full_name") @db.VarChar(50)
  email         String         @unique @db.VarChar(100)
  status        Boolean
  password      String         @db.Text
  role          String         @db.VarChar(30)
  modules       Module[]
  students      Student[]
  registrations Registration[]
}

model Module {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  duration      DateTime
  price         Decimal        @db.Decimal(10, 2)
  status        Boolean
  userId        Int            @map("user_id")
  user          User           @relation(fields: [userId], references: [id])
  registrations Registration[]
  payments      Payment[]
}

model Student {
  id            Int            @id @default(autoincrement())
  fullName      String         @map("full_name") @db.VarChar(50)
  phoneNumber   String         @unique @map("phone_number") @db.VarChar(15)
  email         String         @unique @db.VarChar(100)
  address       String         @db.VarChar(100)
  tutor         String?        @db.VarChar(50)
  status        Boolean
  userId        Int            @map("user_id")
  user          User           @relation(fields: [userId], references: [id])
  registrations Registration[]
  payments      Payment[]
}

model Registration {
  id           Int       @id @default(autoincrement())
  dateRegister DateTime  @map("date_register")
  startDate    DateTime  @map("start_date")
  endDate      DateTime  @map("end_date")
  amount       Decimal   @db.Decimal(10, 2)
  userId       Int       @map("user_id")
  studentId    Int       @map("student_id")
  moduleId     Int       @map("module_id")
  user         User      @relation(fields: [userId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id])
  module       Module    @relation(fields: [moduleId], references: [id])
  payments     Payment[]
}

model Payment {
  studentId      Int
  moduleId       Int
  registrationId Int
  paymentDate    DateTime     @map("payment_date")
  amount         Decimal      @db.Decimal(10, 2)
  payer          String       @db.VarChar(50)
  payerNumber    String       @map("payer_number") @db.VarChar(15)
  paymentMode    String       @map("payment_mode") @db.VarChar(50)
  student        Student      @relation(fields: [studentId], references: [id])
  module         Module       @relation(fields: [moduleId], references: [id])
  registration   Registration @relation(fields: [registrationId], references: [id])

  @@id([studentId, moduleId, registrationId])
}
